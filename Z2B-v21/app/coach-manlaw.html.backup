<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Coach Manlaw - Where Employees Build Entrepreneur Mindsets | Z2B</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600;700;800&display=swap"
        rel="stylesheet">
    <style>
        :root {
            /* Futuristic Royal Gold */
            --royal-gold: #FFD700;
            --royal-gold-light: #FFED4E;
            --royal-gold-dark: #D4AF37;
            --royal-gold-shine: #FFF9C4;
            --royal-gold-deep: #B8860B;
            --gold-glow: rgba(255, 215, 0, 0.6);

            /* Futuristic Royal Blue */
            --royal-blue: #0A1F44;
            --royal-blue-light: #1E3A8A;
            --royal-blue-bright: #2563EB;
            --royal-blue-neon: #60A5FA;
            --royal-blue-deep: #030B1F;
            --blue-glow: rgba(37, 99, 235, 0.5);

            /* Cyber Accents */
            --cyber-cyan: #00D9FF;
            --cyber-purple: #B45FFF;
            --neon-pink: #FF006E;
            --electric-blue: #0066FF;

            /* Base Colors */
            --white: #FFFFFF;
            --black: #000000;
            --success: #00FF88;
            --warning: #FFB800;

            /* Legacy aliases */
            --gold: var(--royal-gold);
            --light-gold: var(--royal-gold-light);
            --deep-navy: var(--royal-blue);
            --navy-blue: var(--royal-blue-light);
            --dark-navy: var(--royal-blue-deep);
            --orange: var(--royal-gold-dark);
            --border-color: var(--gold-glow);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Poppins', sans-serif;
            background:
                radial-gradient(ellipse at top left, var(--royal-blue-bright) 0%, transparent 50%),
                radial-gradient(ellipse at bottom right, var(--royal-gold-dark) 0%, transparent 50%),
                linear-gradient(135deg, var(--royal-blue-deep) 0%, var(--royal-blue) 50%, var(--royal-blue-deep) 100%);
            color: var(--white);
            height: 100vh;
            overflow: hidden;
            position: relative;
        }

        body::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background:
                repeating-linear-gradient(
                    0deg,
                    transparent,
                    transparent 2px,
                    rgba(255, 215, 0, 0.03) 2px,
                    rgba(255, 215, 0, 0.03) 4px
                );
            pointer-events: none;
            z-index: 1;
        }

        .coach-container {
            display: grid;
            grid-template-columns: 320px 1fr;
            height: 100vh;
            position: relative;
            z-index: 10;
        }

        /* Sidebar */
        .sidebar {
            background: linear-gradient(180deg, rgba(10, 31, 68, 0.95) 0%, rgba(3, 11, 31, 0.98) 100%);
            padding: 2rem 1.5rem;
            border-right: 3px solid var(--royal-gold);
            box-shadow:
                inset -3px 0 15px var(--gold-glow),
                5px 0 30px rgba(0, 0, 0, 0.5);
            overflow-y: auto;
            position: relative;
        }

        .sidebar::before {
            content: '';
            position: absolute;
            top: 0;
            right: 0;
            width: 3px;
            height: 100%;
            background: linear-gradient(180deg, transparent, var(--royal-gold), transparent);
            animation: borderGlow 3s ease-in-out infinite;
        }

        @keyframes borderGlow {
            0%, 100% {
                opacity: 0.5;
            }
            50% {
                opacity: 1;
                filter: drop-shadow(0 0 10px var(--royal-gold));
            }
        }

        .back-btn {
            color: var(--gold);
            text-decoration: none;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            margin-bottom: 2rem;
            transition: all 0.3s;
        }

        .back-btn:hover {
            color: var(--orange);
            transform: translateX(-5px);
        }

        .coach-avatar-lg {
            width: 150px;
            height: 150px;
            border-radius: 50%;
            background: linear-gradient(135deg, var(--royal-gold) 0%, var(--royal-gold-light) 50%, var(--royal-gold-dark) 100%);
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 5rem;
            margin: 0 auto 1.5rem;
            border: 4px solid var(--royal-gold);
            box-shadow:
                0 0 30px var(--gold-glow),
                0 0 60px rgba(255, 215, 0, 0.3),
                inset 0 0 20px rgba(255, 255, 255, 0.2);
            animation: pulseGlow 3s ease-in-out infinite;
            position: relative;
        }

        .coach-avatar-lg::before {
            content: '';
            position: absolute;
            inset: -10px;
            border-radius: 50%;
            background: conic-gradient(
                var(--royal-gold),
                var(--royal-blue-bright),
                var(--royal-gold)
            );
            opacity: 0.5;
            filter: blur(20px);
            animation: rotate 4s linear infinite;
            z-index: -1;
        }

        @keyframes pulseGlow {
            0%, 100% {
                transform: scale(1);
                box-shadow:
                    0 0 30px var(--gold-glow),
                    0 0 60px rgba(255, 215, 0, 0.3),
                    inset 0 0 20px rgba(255, 255, 255, 0.2);
            }
            50% {
                transform: scale(1.05);
                box-shadow:
                    0 0 50px var(--gold-glow),
                    0 0 80px rgba(255, 215, 0, 0.5),
                    inset 0 0 30px rgba(255, 255, 255, 0.3);
            }
        }

        @keyframes rotate {
            from {
                transform: rotate(0deg);
            }
            to {
                transform: rotate(360deg);
            }
        }

        .coach-name {
            text-align: center;
            font-size: 1.8rem;
            font-weight: bold;
            color: var(--gold);
            margin-bottom: 0.5rem;
        }

        .coach-status {
            text-align: center;
            color: var(--white);
            opacity: 0.8;
            margin-bottom: 2rem;
        }

        .status-indicator {
            display: inline-block;
            width: 10px;
            height: 10px;
            border-radius: 50%;
            background: #00ff00;
            margin-right: 5px;
            animation: blink 2s ease-in-out infinite;
        }

        @keyframes blink {

            0%,
            100% {
                opacity: 1;
            }

            50% {
                opacity: 0.3;
            }
        }

        .btss-panel {
            background: linear-gradient(135deg, rgba(30, 58, 138, 0.3) 0%, rgba(10, 31, 68, 0.5) 100%);
            padding: 1.5rem;
            border-radius: 15px;
            margin-bottom: 1.5rem;
            border: 2px solid rgba(255, 215, 0, 0.3);
            box-shadow:
                0 4px 20px rgba(0, 0, 0, 0.3),
                inset 0 1px 0 rgba(255, 255, 255, 0.1);
            position: relative;
            overflow: hidden;
        }

        .btss-panel::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 215, 0, 0.1), transparent);
            animation: shimmer 3s infinite;
        }

        @keyframes shimmer {
            0% { left: -100%; }
            100% { left: 100%; }
        }

        .btss-panel h5 {
            color: var(--royal-gold);
            margin-bottom: 1rem;
            font-size: 1rem;
            text-transform: uppercase;
            letter-spacing: 2px;
            text-shadow: 0 0 10px var(--gold-glow);
        }

        .leg-bar {
            margin-bottom: 1rem;
        }

        .leg-label {
            display: flex;
            justify-content: space-between;
            margin-bottom: 0.5rem;
            font-size: 0.85rem;
            color: var(--royal-gold-light);
        }

        .bar-container {
            width: 100%;
            height: 10px;
            background: rgba(3, 11, 31, 0.8);
            border-radius: 10px;
            overflow: hidden;
            border: 1px solid rgba(255, 215, 0, 0.2);
            box-shadow: inset 0 2px 5px rgba(0, 0, 0, 0.5);
        }

        .bar-fill {
            height: 100%;
            background: linear-gradient(90deg,
                var(--royal-blue-bright) 0%,
                var(--cyber-cyan) 50%,
                var(--royal-gold) 100%);
            border-radius: 10px;
            transition: width 1s ease;
            box-shadow: 0 0 15px rgba(0, 217, 255, 0.6);
            position: relative;
            overflow: hidden;
        }

        .bar-fill::after {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.4), transparent);
            animation: barShine 2s infinite;
        }

        @keyframes barShine {
            0% { left: -100%; }
            100% { left: 100%; }
        }

        .stats-box {
            background: linear-gradient(135deg, var(--royal-gold) 0%, var(--royal-gold-light) 100%);
            padding: 1rem;
            border-radius: 15px;
            text-align: center;
            color: var(--royal-blue-deep);
            margin-bottom: 1rem;
            border: 2px solid var(--royal-gold-shine);
            box-shadow:
                0 8px 25px rgba(255, 215, 0, 0.4),
                inset 0 1px 0 rgba(255, 255, 255, 0.5);
            position: relative;
            overflow: hidden;
        }

        .stats-box::before {
            content: '';
            position: absolute;
            top: -50%;
            left: -50%;
            width: 200%;
            height: 200%;
            background: linear-gradient(45deg, transparent 30%, rgba(255, 255, 255, 0.3) 50%, transparent 70%);
            animation: statsShine 3s infinite;
        }

        @keyframes statsShine {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .stats-number {
            font-size: 2rem;
            font-weight: bold;
            position: relative;
            z-index: 1;
        }

        .stats-label {
            font-size: 0.85rem;
            font-weight: 600;
            position: relative;
            z-index: 1;
        }

        .sidebar-buttons {
            display: flex;
            flex-direction: column;
            gap: 0.8rem;
        }

        .sidebar-btn {
            background: linear-gradient(135deg, rgba(30, 58, 138, 0.5) 0%, rgba(10, 31, 68, 0.7) 100%);
            border: 2px solid var(--royal-gold);
            padding: 0.8rem;
            border-radius: 10px;
            color: var(--white);
            cursor: pointer;
            transition: all 0.3s;
            font-weight: 600;
            position: relative;
            overflow: hidden;
            text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
        }

        .sidebar-btn::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 215, 0, 0.3), transparent);
            transition: left 0.5s;
        }

        .sidebar-btn:hover::before {
            left: 100%;
        }

        .sidebar-btn:hover {
            background: linear-gradient(135deg, var(--royal-gold) 0%, var(--royal-gold-light) 100%);
            color: var(--royal-blue-deep);
            border-color: var(--royal-gold-shine);
            box-shadow:
                0 0 20px var(--gold-glow),
                inset 0 1px 0 rgba(255, 255, 255, 0.5);
            transform: translateY(-2px);
        }

        /* Chat Area */
        .chat-area {
            display: flex;
            flex-direction: column;
            height: 100vh;
        }

        .chat-header {
            background: linear-gradient(135deg, rgba(30, 58, 138, 0.8) 0%, rgba(10, 31, 68, 0.9) 100%);
            padding: 1.5rem 2rem;
            border-bottom: 3px solid var(--royal-gold);
            box-shadow:
                0 4px 20px rgba(0, 0, 0, 0.3),
                inset 0 -3px 15px var(--gold-glow);
            position: relative;
        }

        .chat-header::after {
            content: '';
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            height: 3px;
            background: linear-gradient(90deg,
                transparent,
                var(--royal-gold),
                transparent);
            animation: headerScan 3s ease-in-out infinite;
        }

        @keyframes headerScan {
            0%, 100% { opacity: 0.3; }
            50% { opacity: 1; }
        }

        .chat-header h2 {
            color: var(--royal-gold);
            font-size: 1.8rem;
            margin-bottom: 0.3rem;
            text-shadow: 0 0 20px var(--gold-glow);
            letter-spacing: 1px;
        }

        .chat-header p {
            color: var(--white);
            opacity: 0.9;
            font-size: 0.95rem;
            margin: 0;
            text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
        }

        .chat-messages {
            flex: 1;
            overflow-y: auto;
            padding: 2rem;
            background:
                linear-gradient(180deg, rgba(10, 31, 68, 0.3) 0%, rgba(3, 11, 31, 0.5) 100%);
        }

        .message {
            display: flex;
            margin-bottom: 1.5rem;
            animation: slideIn 0.3s ease;
        }

        @keyframes slideIn {
            from {
                opacity: 0;
                transform: translateY(10px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .message.coach {
            justify-content: flex-start;
        }

        .message.user {
            justify-content: flex-end;
        }

        .message-avatar {
            width: 45px;
            height: 45px;
            border-radius: 50%;
            background: linear-gradient(135deg, var(--gold), var(--orange));
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.5rem;
            margin-right: 1rem;
            flex-shrink: 0;
        }

        .message.user .message-avatar {
            margin-right: 0;
            margin-left: 1rem;
            order: 2;
            background: linear-gradient(135deg, var(--deep-navy), var(--navy-blue));
        }

        .message-content {
            max-width: 70%;
            background: rgba(255, 255, 255, 0.95);
            padding: 1.2rem 1.5rem;
            border-radius: 20px;
            color: var(--dark-navy);
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
        }

        .message-content strong {
            color: var(--dark-text);
            font-weight: 700;
        }

        .message-content em {
            color: var(--medium-text);
            font-style: italic;
        }

        .message.user .message-content {
            background: linear-gradient(135deg, var(--gold), var(--orange));
            color: var(--navy-blue);
        }

        .message-text {
            line-height: 1.6;
            margin-bottom: 0.5rem;
            color: var(--medium-text);
        }

        .message-time {
            font-size: 0.75rem;
            opacity: 0.6;
            text-align: right;
            color: var(--dark-navy);
        }

        .typing-indicator {
            display: none;
            padding: 1rem 1.5rem;
            background: rgba(255, 255, 255, 0.95);
            border-radius: 20px;
            width: fit-content;
        }

        .typing-indicator.active {
            display: block;
        }

        .typing-dot {
            display: inline-block;
            width: 8px;
            height: 8px;
            border-radius: 50%;
            background: var(--navy-blue);
            margin: 0 2px;
            animation: typing 1.4s infinite;
        }

        .typing-dot:nth-child(2) {
            animation-delay: 0.2s;
        }

        .typing-dot:nth-child(3) {
            animation-delay: 0.4s;
        }

        @keyframes typing {

            0%,
            60%,
            100% {
                opacity: 0.3;
                transform: translateY(0);
            }

            30% {
                opacity: 1;
                transform: translateY(-10px);
            }
        }

        /* Input Area */
        .chat-input-area {
            background: linear-gradient(135deg, rgba(30, 58, 138, 0.8) 0%, rgba(10, 31, 68, 0.9) 100%);
            padding: 1.5rem 2rem;
            border-top: 3px solid var(--royal-gold);
            box-shadow:
                0 -4px 20px rgba(0, 0, 0, 0.3),
                inset 0 3px 15px var(--gold-glow);
        }

        .quick-actions {
            display: flex;
            gap: 0.8rem;
            margin-bottom: 1rem;
            flex-wrap: wrap;
        }

        .quick-action-btn {
            background: linear-gradient(135deg, rgba(30, 58, 138, 0.6) 0%, rgba(10, 31, 68, 0.8) 100%);
            border: 2px solid rgba(255, 215, 0, 0.4);
            padding: 0.6rem 1.2rem;
            border-radius: 50px;
            color: var(--white);
            font-size: 0.85rem;
            cursor: pointer;
            transition: all 0.3s;
            position: relative;
            overflow: hidden;
        }

        .quick-action-btn::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 215, 0, 0.3), transparent);
            transition: left 0.5s;
        }

        .quick-action-btn:hover::before {
            left: 100%;
        }

        .quick-action-btn:hover {
            background: linear-gradient(135deg, var(--royal-gold) 0%, var(--royal-gold-light) 100%);
            color: var(--royal-blue-deep);
            border-color: var(--royal-gold-shine);
            box-shadow: 0 0 15px var(--gold-glow);
        }

        .input-container {
            display: flex;
            gap: 1rem;
            align-items: center;
        }

        .chat-input {
            flex: 1;
            background: rgba(3, 11, 31, 0.8);
            border: 2px solid rgba(255, 215, 0, 0.4);
            border-radius: 50px;
            padding: 1rem 1.5rem;
            color: var(--white);
            font-size: 1rem;
            transition: all 0.3s;
            box-shadow: inset 0 2px 10px rgba(0, 0, 0, 0.5);
        }

        .chat-input:focus {
            outline: none;
            background: rgba(3, 11, 31, 0.9);
            border-color: var(--royal-gold);
            box-shadow:
                inset 0 2px 10px rgba(0, 0, 0, 0.5),
                0 0 20px var(--gold-glow);
        }

        .chat-input::placeholder {
            color: rgba(255, 255, 255, 0.5);
        }

        .btn-send {
            width: 55px;
            height: 55px;
            border-radius: 50%;
            background: linear-gradient(135deg, var(--royal-gold) 0%, var(--royal-gold-light) 100%);
            border: 2px solid var(--royal-gold-shine);
            color: var(--royal-blue-deep);
            font-size: 1.3rem;
            transition: all 0.3s;
            cursor: pointer;
            box-shadow:
                0 4px 15px var(--gold-glow),
                inset 0 1px 0 rgba(255, 255, 255, 0.5);
            position: relative;
            overflow: hidden;
        }

        .btn-send::before {
            content: '';
            position: absolute;
            top: -50%;
            left: -50%;
            width: 200%;
            height: 200%;
            background: linear-gradient(45deg, transparent 30%, rgba(255, 255, 255, 0.4) 50%, transparent 70%);
            animation: buttonShine 2s infinite;
        }

        @keyframes buttonShine {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .btn-send:hover:not(:disabled) {
            transform: scale(1.1);
            box-shadow:
                0 8px 30px var(--gold-glow),
                0 0 40px rgba(255, 215, 0, 0.6),
                inset 0 1px 0 rgba(255, 255, 255, 0.7);
        }

        .btn-send:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        /* Assessment Modal */
        .modal-overlay {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(3, 11, 31, 0.95);
            backdrop-filter: blur(10px);
            z-index: 2000;
            overflow-y: auto;
        }

        .modal-overlay.show {
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 2rem;
        }

        .modal-content {
            background: linear-gradient(135deg, var(--royal-blue) 0%, var(--royal-blue-deep) 100%);
            border-radius: 20px;
            padding: 2rem;
            max-width: 700px;
            width: 100%;
            max-height: 90vh;
            overflow-y: auto;
            border: 3px solid var(--royal-gold);
            box-shadow:
                0 20px 60px rgba(0, 0, 0, 0.6),
                inset 0 1px 0 rgba(255, 255, 255, 0.1),
                0 0 40px var(--gold-glow);
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2rem;
            border-bottom: 2px solid rgba(255, 215, 0, 0.3);
            padding-bottom: 1rem;
        }

        .modal-header h3 {
            color: var(--royal-gold);
            font-size: 1.8rem;
            margin: 0;
            text-shadow: 0 0 20px var(--gold-glow);
            letter-spacing: 1px;
        }

        .btn-close {
            background: linear-gradient(135deg, var(--royal-gold) 0%, var(--royal-gold-light) 100%);
            border: 2px solid var(--royal-gold-shine);
            color: var(--royal-blue-deep);
            width: 40px;
            height: 40px;
            border-radius: 50%;
            cursor: pointer;
            font-size: 1.2rem;
            transition: all 0.3s;
            box-shadow: 0 4px 15px var(--gold-glow);
        }

        .btn-close:hover {
            transform: rotate(90deg) scale(1.1);
            box-shadow: 0 8px 25px var(--gold-glow);
        }

        .assessment-form {
            display: flex;
            flex-direction: column;
            gap: 2rem;
        }

        .assessment-item {
            background: linear-gradient(135deg, rgba(30, 58, 138, 0.3) 0%, rgba(10, 31, 68, 0.5) 100%);
            padding: 1.5rem;
            border-radius: 15px;
            border: 2px solid rgba(255, 215, 0, 0.2);
            box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.05);
        }

        .assessment-item h4 {
            color: var(--royal-gold);
            margin-bottom: 0.5rem;
            text-shadow: 0 0 10px var(--gold-glow);
        }

        .assessment-item p {
            color: var(--white);
            opacity: 0.9;
            font-size: 0.9rem;
            margin-bottom: 1rem;
        }

        .slider-container {
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .slider {
            flex: 1;
            height: 10px;
            border-radius: 10px;
            background: rgba(3, 11, 31, 0.8);
            border: 1px solid rgba(255, 215, 0, 0.3);
            outline: none;
            appearance: none;
            box-shadow: inset 0 2px 5px rgba(0, 0, 0, 0.5);
        }

        .slider::-webkit-slider-track {
            height: 10px;
            border-radius: 10px;
            background: transparent;
        }

        .slider::-webkit-slider-thumb {
            appearance: none;
            width: 24px;
            height: 24px;
            border-radius: 50%;
            background: linear-gradient(135deg, var(--royal-gold) 0%, var(--royal-gold-light) 100%);
            border: 2px solid var(--royal-gold-shine);
            cursor: pointer;
            box-shadow:
                0 0 15px var(--gold-glow),
                inset 0 1px 0 rgba(255, 255, 255, 0.5);
            transition: all 0.3s;
        }

        .slider::-webkit-slider-thumb:hover {
            transform: scale(1.2);
            box-shadow:
                0 0 25px var(--gold-glow),
                inset 0 1px 0 rgba(255, 255, 255, 0.7);
        }

        .slider::-moz-range-thumb {
            width: 24px;
            height: 24px;
            border-radius: 50%;
            background: linear-gradient(135deg, var(--royal-gold) 0%, var(--royal-gold-light) 100%);
            border: 2px solid var(--royal-gold-shine);
            cursor: pointer;
            box-shadow:
                0 0 15px var(--gold-glow),
                inset 0 1px 0 rgba(255, 255, 255, 0.5);
        }

        .slider-value {
            font-size: 1.5rem;
            font-weight: bold;
            color: var(--gold);
            min-width: 50px;
            text-align: center;
        }

        .btn-submit {
            width: 100%;
            padding: 1.2rem;
            background: linear-gradient(135deg, var(--gold), var(--orange));
            color: var(--navy-blue);
            border: none;
            border-radius: 15px;
            font-size: 1.2rem;
            font-weight: 700;
            cursor: pointer;
            transition: all 0.3s;
            margin-top: 1rem;
        }

        .btn-submit:hover {
            transform: translateY(-3px);
            box-shadow: 0 10px 30px rgba(212, 175, 55, 0.5);
        }

        /* Scrollbar */
        .chat-messages::-webkit-scrollbar,
        .sidebar::-webkit-scrollbar,
        .modal-content::-webkit-scrollbar {
            width: 8px;
        }

        .chat-messages::-webkit-scrollbar-track,
        .sidebar::-webkit-scrollbar-track,
        .modal-content::-webkit-scrollbar-track {
            background: rgba(0, 0, 0, 0.2);
        }

        .chat-messages::-webkit-scrollbar-thumb,
        .sidebar::-webkit-scrollbar-thumb,
        .modal-content::-webkit-scrollbar-thumb {
            background: linear-gradient(180deg, var(--gold), var(--orange));
            border-radius: 10px;
        }

        /* Responsive */
        @media (max-width: 992px) {
            .coach-container {
                grid-template-columns: 1fr;
            }

            .sidebar {
                display: none;
            }

            .message-content {
                max-width: 85%;
            }
        }
    </style>
</head>

<body>
    <div class="coach-container">
        <!-- Sidebar -->
        <div class="sidebar">
            <a href="dashboard.html" class="back-btn">
                <i class="fas fa-arrow-left"></i> Dashboard
            </a>

            <div class="coach-avatar-lg">🎯</div>
            <h3 class="coach-name">Coach Manlaw</h3>
            <p class="coach-status">
                <span class="status-indicator"></span>
                Online & Ready
            </p>

            <div class="btss-panel">
                <h5><i class="fas fa-chart-line"></i> Four Legs Progress</h5>
                <div class="leg-bar">
                    <div class="leg-label">
                        <span>🧠 Mindset Mystery</span>
                        <span id="mindsetScore">--</span>
                    </div>
                    <div class="bar-container">
                        <div class="bar-fill" id="mindsetBar" style="width: 0%"></div>
                    </div>
                </div>
                <div class="leg-bar">
                    <div class="leg-label">
                        <span>💸 Money Moves</span>
                        <span id="moneyScore">--</span>
                    </div>
                    <div class="bar-container">
                        <div class="bar-fill" id="moneyBar" style="width: 0%"></div>
                    </div>
                </div>
                <div class="leg-bar">
                    <div class="leg-label">
                        <span>⚙️ Legacy Missions</span>
                        <span id="legacyScore">--</span>
                    </div>
                    <div class="bar-container">
                        <div class="bar-fill" id="legacyBar" style="width: 0%"></div>
                    </div>
                </div>
                <div class="leg-bar">
                    <div class="leg-label">
                        <span>🌍 Momentum Movement</span>
                        <span id="movementScore">--</span>
                    </div>
                    <div class="bar-container">
                        <div class="bar-fill" id="movementBar" style="width: 0%"></div>
                    </div>
                </div>
            </div>

            <div class="stats-box">
                <div class="stats-number" id="statsDay">Day 1</div>
                <div class="stats-label">Your Journey</div>
            </div>

            <div class="stats-box" style="background: linear-gradient(135deg, var(--success), var(--purple));">
                <div class="stats-number" id="statsOverall">0%</div>
                <div class="stats-label">Overall BTSS</div>
            </div>

            <!-- Current Lesson Card -->
            <div class="btss-panel" id="lessonCard" style="background: linear-gradient(135deg, rgba(255, 107, 53, 0.15), rgba(212, 175, 55, 0.15)); border: 2px solid var(--gold);">
                <h5 style="margin-bottom: 0.8rem;"><i class="fas fa-book-open"></i> Today's Lesson</h5>
                <div style="margin-bottom: 1rem;">
                    <div style="font-size: 0.75rem; color: var(--orange); font-weight: 600; margin-bottom: 0.3rem;">
                        <span id="lessonWeekPhase">WEEK 1 • MINDSET MYSTERY</span>
                    </div>
                    <div style="font-size: 0.95rem; color: var(--gold); font-weight: 700; line-height: 1.3;" id="lessonTitle">
                        The Employee Trap: Why You're Stuck
                    </div>
                </div>
                <div style="display: flex; gap: 0.5rem; margin-bottom: 0.8rem;">
                    <button class="sidebar-btn" style="flex: 1; padding: 0.5rem; font-size: 0.75rem;" onclick="viewLesson()">
                        <i class="fas fa-eye"></i> View
                    </button>
                    <button class="sidebar-btn" style="flex: 1; padding: 0.5rem; font-size: 0.75rem;" onclick="completeLesson()">
                        <i class="fas fa-check"></i> Complete
                    </button>
                </div>
                <div style="display: flex; gap: 0.5rem;">
                    <button class="sidebar-btn" style="flex: 1; padding: 0.5rem; font-size: 0.75rem;" onclick="previousDay()">
                        <i class="fas fa-chevron-left"></i>
                    </button>
                    <button class="sidebar-btn" style="flex: 1; padding: 0.5rem; font-size: 0.75rem;" onclick="nextDay()">
                        <i class="fas fa-chevron-right"></i>
                    </button>
                </div>
            </div>

            <div class="sidebar-buttons">
                <button class="sidebar-btn" onclick="openAssessment()">
                    <i class="fas fa-clipboard-check"></i> Take BTSS Assessment
                </button>
                <button class="sidebar-btn" onclick="showProgress()">
                    <i class="fas fa-chart-line"></i> View Progress
                </button>
                <button class="sidebar-btn" onclick="showSettings()">
                    <i class="fas fa-cog"></i> AI Settings
                </button>
            </div>
        </div>

        <!-- Chat Area -->
        <div class="chat-area">
            <div class="chat-header">
                <h2><i class="fas fa-graduation-cap"></i> Coach Manlaw</h2>
                <p id="headerStatus">Where Employees Build Entrepreneur Mindsets, Money Systems, Movements and Legacies</p>
            </div>

            <div class="chat-messages" id="chatMessages">
                <!-- Welcome Message -->
                <div class="message coach">
                    <div class="message-avatar">🎯</div>
                    <div class="message-content">
                        <div class="message-text">
                            <strong>Hey there, Future Billionaire! 👋</strong><br><br>
                            I'm Coach Manlaw—part mentor, part strategist, all about helping you build something that outlives you.
                            You know that quote, <em>"As a man thinks, so is he"</em> (Proverbs 23:7)? That's where we start.
                            But thinking alone won't pay bills—so we're building <strong>systems, movements, and money machines</strong>.<br><br>

                            Here's the deal: Your success is determined by your <strong>weakest leg</strong>. Imagine a billion-dollar
                            table wobbling because one leg is weak—that's most entrepreneurs. We're fixing that.<br><br>

                            <strong>The Four Legs of Your Billionaire Table:</strong><br>
                            <strong>🧠 Mindset Mystery</strong> - Transform your identity & beliefs (billionaires think differently)<br>
                            <strong>💸 Money Moves</strong> - Build wealth systems that work while you sleep<br>
                            <strong>⚙️ Legacy Missions</strong> - Create scalable systems & automation<br>
                            <strong>🌍 Momentum Movement</strong> - Build influence & lead movements<br><br>

                            <em>"I am a Legacy Builder, You are a Legacy Builder, and Together we are Builders of Legacies."</em><br><br>

                            <strong>First Step:</strong> Take your BTSS (Billionaire Table Stability Score) assessment so I know exactly
                            where to focus your coaching. Or just ask me anything—I'm here 24/7. Let's build! 💪🔥
                        </div>
                        <div class="message-time" id="welcomeTime">Just now</div>
                    </div>
                </div>

                <div class="typing-indicator" id="typingIndicator">
                    <span class="typing-dot"></span>
                    <span class="typing-dot"></span>
                    <span class="typing-dot"></span>
                </div>
            </div>

            <div class="chat-input-area">
                <div class="quick-actions" id="quickActions">
                    <button class="quick-action-btn" onclick="viewLesson()">
                        📖 Today's Lesson
                    </button>
                    <button class="quick-action-btn" onclick="viewLesson()">
                        🎯 Today's Activity
                    </button>
                    <button class="quick-action-btn" onclick="openAssessment()">
                        💡 Take Assessment
                    </button>
                    <button class="quick-action-btn" onclick="showProgress()">
                        📊 My Progress
                    </button>
                </div>

                <div class="input-container">
                    <input type="text" class="chat-input" id="messageInput" placeholder="Ask Coach Manlaw anything..."
                        onkeypress="handleKeyPress(event)">
                    <button class="btn-send" id="sendBtn" onclick="sendMessage()">
                        <i class="fas fa-paper-plane"></i>
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- BTSS Assessment Modal -->
    <div class="modal-overlay" id="assessmentModal">
        <div class="modal-content">
            <div class="modal-header">
                <h3><i class="fas fa-clipboard-check"></i> BTSS Assessment</h3>
                <button class="btn-close" onclick="closeAssessment()">
                    <i class="fas fa-times"></i>
                </button>
            </div>

            <p style="color: var(--white); opacity: 0.9; margin-bottom: 2rem;">
                Rate each of the Four Legs honestly (0-100). Your weakest leg determines your table's stability!
            </p>

            <form class="assessment-form">
                <div class="assessment-item">
                    <h4>🧠 Mindset Mystery</h4>
                    <p>Your beliefs, vision, spiritual alignment, and mental wealth</p>
                    <div class="slider-container">
                        <input type="range" min="0" max="100" value="50" class="slider" id="mindsetSlider">
                        <span class="slider-value" id="mindsetValue">50</span>
                    </div>
                </div>

                <div class="assessment-item">
                    <h4>💸 Money Moves</h4>
                    <p>Financial intelligence, income streams, and wealth multiplication</p>
                    <div class="slider-container">
                        <input type="range" min="0" max="100" value="50" class="slider" id="moneySlider">
                        <span class="slider-value" id="moneyValue">50</span>
                    </div>
                </div>

                <div class="assessment-item">
                    <h4>⚙️ Legacy Missions</h4>
                    <p>Scalable systems, automation, purpose-driven business, and management</p>
                    <div class="slider-container">
                        <input type="range" min="0" max="100" value="50" class="slider" id="legacySlider">
                        <span class="slider-value" id="legacyValue">50</span>
                    </div>
                </div>

                <div class="assessment-item">
                    <h4>🌍 Momentum Movement</h4>
                    <p>Impact, influence, community building, and leadership</p>
                    <div class="slider-container">
                        <input type="range" min="0" max="100" value="50" class="slider" id="movementSlider">
                        <span class="slider-value" id="movementValue">50</span>
                    </div>
                </div>

                <button type="button" class="btn-submit" onclick="submitAssessment()">
                    <i class="fas fa-check"></i> Submit Assessment
                </button>
            </form>
        </div>
    </div>

    <!-- Settings Modal -->
    <div class="modal-overlay" id="settingsModal">
        <div class="modal-content">
            <div class="modal-header">
                <h3><i class="fas fa-cog"></i> AI Settings</h3>
                <button class="btn-close" onclick="closeSettings()">
                    <i class="fas fa-times"></i>
                </button>
            </div>

            <div class="assessment-item">
                <h4>AI API Key</h4>
                <p>Enter your API key to enable AI coaching</p>
                <input type="password" id="claudeKey" placeholder="Enter API key..."
                    style="width: 100%; padding: 1rem; border-radius: 10px; border: 2px solid var(--gold); background: rgba(255,255,255,0.1); color: white;">
            </div>

            <div class="assessment-item">
                <h4>AI Model</h4>
                <select id="aiModel"
                    style="width: 100%; padding: 1rem; border-radius: 10px; border: 2px solid var(--gold); background: rgba(255,255,255,0.1); color: white;">
                    <option value="claude-sonnet-4-20250514">Advanced Model (Recommended)</option>
                    <option value="gpt-4">Alternative Model</option>
                </select>
            </div>

            <button type="button" class="btn-submit" onclick="saveSettings()">
                <i class="fas fa-save"></i> Save Settings
            </button>
        </div>
    </div>

    <!-- Lesson Detail Modal -->
    <div class="modal-overlay" id="lessonModal">
        <div class="modal-content">
            <div class="modal-header">
                <div>
                    <div style="font-size: 0.85rem; color: var(--orange); margin-bottom: 0.3rem;" id="modalLessonWeek">WEEK 1 • DAY 1</div>
                    <h3 id="modalLessonTitle">The Employee Trap: Why You're Stuck</h3>
                </div>
                <button class="btn-close" onclick="closeLessonModal()">
                    <i class="fas fa-times"></i>
                </button>
            </div>

            <div class="assessment-item">
                <h4><i class="fas fa-book"></i> Content</h4>
                <p id="modalLessonContent" style="white-space: pre-line;">
                    Understanding the psychological chains of employment...
                </p>
            </div>

            <div class="assessment-item">
                <h4><i class="fas fa-play-circle"></i> Activity</h4>
                <p id="modalLessonActivity">
                    Write down 5 employee beliefs holding you back...
                </p>
            </div>

            <div class="assessment-item">
                <h4><i class="fas fa-clipboard-list"></i> Assignment</h4>
                <p id="modalLessonAssignment">
                    BTSS Assessment - Baseline measurement...
                </p>
            </div>

            <div class="assessment-item" id="modalAppConnection" style="display: none; background: linear-gradient(135deg, rgba(255, 107, 53, 0.1), rgba(212, 175, 55, 0.1));">
                <h4><i class="fas fa-link"></i> Recommended App</h4>
                <p><strong id="modalAppName">ZYRO</strong></p>
                <p id="modalAppHow" style="font-size: 0.9rem;">Use ZYRO's challenges to practice...</p>
            </div>

            <!-- Learning Mode Selector -->
            <div class="assessment-item" style="background: linear-gradient(135deg, rgba(76, 236, 196, 0.1), rgba(155, 89, 182, 0.1));">
                <h4><i class="fas fa-brain"></i> Learning Mode</h4>
                <p style="font-size: 0.85rem; margin-bottom: 1rem;">Choose how you want to experience this lesson:</p>
                <div style="display: grid; grid-template-columns: repeat(3, 1fr); gap: 0.8rem;">
                    <button type="button" class="sidebar-btn" id="modeRead" onclick="setLearningMode('read')" style="padding: 0.8rem; font-size: 0.85rem;">
                        <i class="fas fa-book"></i><br>Read
                    </button>
                    <button type="button" class="sidebar-btn" id="modeListen" onclick="setLearningMode('listen')" style="padding: 0.8rem; font-size: 0.85rem;">
                        <i class="fas fa-headphones"></i><br>Listen
                    </button>
                    <button type="button" class="sidebar-btn" id="modeWatch" onclick="setLearningMode('watch')" style="padding: 0.8rem; font-size: 0.85rem;">
                        <i class="fas fa-video"></i><br>Watch
                    </button>
                </div>
            </div>

            <!-- Audio Player (for Listen mode) -->
            <div class="assessment-item" id="audioPlayer" style="display: none; background: linear-gradient(135deg, rgba(76, 236, 196, 0.15), rgba(155, 89, 182, 0.15));">
                <h4><i class="fas fa-volume-up"></i> Audio Lesson</h4>
                <div style="display: flex; align-items: center; gap: 1rem; margin-top: 1rem;">
                    <button type="button" id="playPauseBtn" onclick="toggleAudio()" style="width: 50px; height: 50px; border-radius: 50%; background: linear-gradient(135deg, var(--success), var(--purple)); border: none; color: white; font-size: 1.2rem; cursor: pointer;">
                        <i class="fas fa-play"></i>
                    </button>
                    <div style="flex: 1;">
                        <div style="font-size: 0.85rem; margin-bottom: 0.3rem;" id="audioProgress">0:00 / 0:00</div>
                        <div class="bar-container">
                            <div class="bar-fill" id="audioProgressBar" style="width: 0%; background: linear-gradient(90deg, var(--success), var(--purple));"></div>
                        </div>
                    </div>
                    <button type="button" onclick="stopAudio()" style="width: 40px; height: 40px; border-radius: 50%; background: rgba(255,255,255,0.1); border: none; color: white; cursor: pointer;">
                        <i class="fas fa-stop"></i>
                    </button>
                </div>
                <p style="font-size: 0.8rem; opacity: 0.7; margin-top: 0.8rem;">
                    <i class="fas fa-info-circle"></i> Listen while you work, drive, or exercise!
                </p>
            </div>

            <!-- Video/Animation View (for Watch mode) -->
            <div class="assessment-item" id="videoPlayer" style="display: none; background: rgba(0,0,0,0.3);">
                <!-- AI Video Lesson Option -->
                <div id="videoGenerateSection" style="background: linear-gradient(135deg, rgba(255, 107, 53, 0.2), rgba(212, 175, 55, 0.2)); padding: 1.5rem; border-radius: 10px; margin-bottom: 1rem;">
                    <h4 style="color: var(--gold); margin-bottom: 0.8rem;">
                        <i class="fas fa-video"></i> AI Video Lesson (VIDZIE)
                    </h4>
                    <p style="font-size: 0.9rem; margin-bottom: 1rem; opacity: 0.9;">
                        Generate a professional talking avatar video of this lesson with Coach Manlaw's voice!
                    </p>
                    <button type="button" onclick="generateCoachingVideo()" id="btnGenerateCoachVideo" style="width: 100%; padding: 1rem; background: linear-gradient(135deg, var(--gold), var(--orange)); border: none; border-radius: 10px; color: var(--navy-blue); font-weight: 700; cursor: pointer;">
                        <i class="fas fa-magic"></i> Generate Video Lesson
                    </button>
                    <div id="videoGenerationProgress" style="display: none; margin-top: 1rem;">
                        <div style="font-size: 0.9rem; margin-bottom: 0.5rem; text-align: center;">
                            <i class="fas fa-spinner fa-spin"></i> Generating your video lesson...
                        </div>
                        <div class="bar-container">
                            <div class="bar-fill" id="videoGenProgressBar" style="width: 0%; background: linear-gradient(90deg, var(--gold), var(--orange));"></div>
                        </div>
                        <p style="font-size: 0.85rem; opacity: 0.7; margin-top: 0.5rem; text-align: center;">
                            This usually takes 10-30 seconds...
                        </p>
                    </div>
                </div>

                <!-- Generated Video Player -->
                <div id="generatedVideoSection" style="display: none; margin-bottom: 1rem;">
                    <video id="coachingVideoPlayer" controls style="width: 100%; border-radius: 10px; background: black;">
                        <source id="videoSource" type="video/mp4">
                    </video>
                    <div style="display: flex; gap: 0.8rem; margin-top: 1rem;">
                        <button type="button" onclick="downloadCoachingVideo()" style="flex: 1; padding: 0.8rem; background: linear-gradient(135deg, var(--success), var(--purple)); border: none; border-radius: 10px; color: white; font-weight: 600; cursor: pointer;">
                            <i class="fas fa-download"></i> Download
                        </button>
                        <button type="button" onclick="shareCoachingVideo()" style="flex: 1; padding: 0.8rem; background: linear-gradient(135deg, var(--gold), var(--orange)); border: none; border-radius: 10px; color: var(--navy-blue); font-weight: 600; cursor: pointer;">
                            <i class="fas fa-share"></i> Share
                        </button>
                    </div>
                </div>

                <!-- Animated Slides (fallback) -->
                <div id="animatedLesson" style="min-height: 300px; padding: 2rem; text-align: center; position: relative; overflow: hidden;">
                    <!-- Animated content will be inserted here -->
                </div>
                <div style="display: flex; gap: 0.8rem; margin-top: 1rem;">
                    <button type="button" onclick="restartAnimation()" style="flex: 1; padding: 0.8rem; background: rgba(255,255,255,0.1); border: none; border-radius: 10px; color: white; cursor: pointer;">
                        <i class="fas fa-redo"></i> Restart Animation
                    </button>
                    <button type="button" onclick="pauseAnimation()" id="pauseAnimBtn" style="flex: 1; padding: 0.8rem; background: rgba(255,255,255,0.1); border: none; border-radius: 10px; color: white; cursor: pointer;">
                        <i class="fas fa-pause"></i> Pause
                    </button>
                </div>
            </div>

            <div style="display: flex; gap: 1rem; margin-top: 1.5rem;">
                <button type="button" class="btn-submit" style="flex: 1; background: rgba(255,255,255,0.1); color: white;" onclick="previousDay()">
                    <i class="fas fa-chevron-left"></i> Previous Day
                </button>
                <button type="button" class="btn-submit" style="flex: 1;" onclick="completeLesson()">
                    <i class="fas fa-check"></i> Mark Complete
                </button>
                <button type="button" class="btn-submit" style="flex: 1; background: rgba(255,255,255,0.1); color: white;" onclick="nextDay()">
                    Next Day <i class="fas fa-chevron-right"></i>
                </button>
            </div>
        </div>
    </div>

    <!-- Progress Dashboard Modal -->
    <div class="modal-overlay" id="progressModal">
        <div class="modal-content" style="max-width: 900px;">
            <div class="modal-header">
                <h3><i class="fas fa-chart-line"></i> 90-Day Progress Dashboard</h3>
                <button class="btn-close" onclick="closeProgress()">
                    <i class="fas fa-times"></i>
                </button>
            </div>

            <div class="assessment-item">
                <h4>Overall Journey</h4>
                <div style="display: grid; grid-template-columns: repeat(3, 1fr); gap: 1rem; margin-top: 1rem;">
                    <div style="text-align: center;">
                        <div style="font-size: 2rem; color: var(--gold); font-weight: bold;" id="progressDay">1</div>
                        <div style="font-size: 0.85rem; opacity: 0.8;">Day of 90</div>
                    </div>
                    <div style="text-align: center;">
                        <div style="font-size: 2rem; color: var(--orange); font-weight: bold;" id="progressPercent">1%</div>
                        <div style="font-size: 0.85rem; opacity: 0.8;">Complete</div>
                    </div>
                    <div style="text-align: center;">
                        <div style="font-size: 2rem; color: var(--success); font-weight: bold;" id="progressCompleted">0</div>
                        <div style="font-size: 0.85rem; opacity: 0.8;">Lessons Done</div>
                    </div>
                </div>
            </div>

            <div class="assessment-item">
                <h4>Phase Progress</h4>
                <div style="margin-top: 1rem;">
                    <div style="margin-bottom: 1rem;">
                        <div style="display: flex; justify-content: space-between; margin-bottom: 0.5rem;">
                            <span>🧠 Phase 1: Mindset Mystery</span>
                            <span id="phase1Progress">0%</span>
                        </div>
                        <div class="bar-container">
                            <div class="bar-fill" id="phase1Bar" style="width: 0%"></div>
                        </div>
                    </div>
                    <div style="margin-bottom: 1rem;">
                        <div style="display: flex; justify-content: space-between; margin-bottom: 0.5rem;">
                            <span>💸 Phase 2: Money Moves</span>
                            <span id="phase2Progress">0%</span>
                        </div>
                        <div class="bar-container">
                            <div class="bar-fill" id="phase2Bar" style="width: 0%"></div>
                        </div>
                    </div>
                    <div style="margin-bottom: 1rem;">
                        <div style="display: flex; justify-content: space-between; margin-bottom: 0.5rem;">
                            <span>⚙️ Phase 3: Legacy Missions</span>
                            <span id="phase3Progress">0%</span>
                        </div>
                        <div class="bar-container">
                            <div class="bar-fill" id="phase3Bar" style="width: 0%"></div>
                        </div>
                    </div>
                    <div style="margin-bottom: 1rem;">
                        <div style="display: flex; justify-content: space-between; margin-bottom: 0.5rem;">
                            <span>🌍 Phase 4: Momentum Movement</span>
                            <span id="phase4Progress">0%</span>
                        </div>
                        <div class="bar-container">
                            <div class="bar-fill" id="phase4Bar" style="width: 0%"></div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="assessment-item">
                <h4>BTSS Evolution</h4>
                <p style="font-size: 0.9rem; opacity: 0.8; margin-bottom: 1rem;">
                    Track how each leg has improved since Day 1
                </p>
                <div id="btssHistory" style="font-size: 0.85rem; opacity: 0.9;">
                    No assessment history yet. Take your first BTSS assessment to start tracking!
                </div>
            </div>

            <button type="button" class="btn-submit" onclick="closeProgress()">
                <i class="fas fa-times"></i> Close
            </button>
        </div>
    </div>

    <!-- Scripts -->
    <script>
        // State
        const currentUserId = 'user_' + (localStorage.getItem('coach_user_id') || Date.now());
        localStorage.setItem('coach_user_id', currentUserId);

        let btssScores = JSON.parse(localStorage.getItem('coach_btss_scores')) || null;
        let btssHistory = JSON.parse(localStorage.getItem('coach_btss_history')) || [];
        let chatHistory = JSON.parse(localStorage.getItem('coach_chat_history')) || [];
        let startDate = localStorage.getItem('coach_start_date') || new Date().toISOString();
        let currentDay = parseInt(localStorage.getItem('coach_current_day')) || 1;
        let completedLessons = JSON.parse(localStorage.getItem('coach_completed_lessons')) || [];
        let curriculum = null;
        let learningMode = localStorage.getItem('coach_learning_mode') || 'read';

        // Audio/Video state
        let speechSynthesis = window.speechSynthesis;
        let currentUtterance = null;
        let isAudioPlaying = false;
        let animationInterval = null;
        let animationPaused = false;

        // User tier management
        let userTier = 'FAM'; // Default to FAM
        function getUserTier() {
            const user = JSON.parse(localStorage.getItem('z2b_current_user') || '{}');
            // Map tier codes to names
            const tierMap = {
                'FREE': 'FAM',
                'STARTER': 'Bronze',
                'PRO': 'Copper',
                'ELITE': 'Silver', // Silver, Gold, Platinum all use ELITE
                'LIFETIME': 'Diamond'
            };
            return tierMap[user.tier] || 'FAM';
        }
        userTier = getUserTier();

        // Tier access functions
        function canAccessLesson(day) {
            if (userTier === 'FAM') {
                return day <= 7; // FAM only gets first 7 lessons
            }
            return true; // All other tiers get all lessons
        }

        function canAccessAudio() {
            // Audio available for Copper and above (Copper,Silver,Gold,Platinum,Diamond)
            return ['Copper', 'Silver', 'Gold', 'Platinum', 'Diamond'].includes(userTier);
        }

        function canAccessVideo() {
            // Video available for Silver and above
            return ['Silver', 'Gold', 'Platinum', 'Diamond'].includes(userTier);
        }

        function showUpgradeNudge(feature, requiredTier) {
            const tierPrices = {
                'Bronze': 'R480/month',
                'Copper': 'R980/month',
                'Silver': 'R1,480/month'
            };

            const message = `
                🔒 <strong>${feature} Locked</strong><br><br>
                Upgrade to <strong>${requiredTier}</strong> (${tierPrices[requiredTier] || ''}) or higher to unlock ${feature}!<br><br>
                <strong>Benefits of ${requiredTier}:</strong><br>
                ${requiredTier === 'Bronze' ? '• Access to Coach Manlaw text lessons<br>• 100 AI Fuel<br>• 25% ISP Commission<br>• 3 Generation TSC' : ''}
                ${requiredTier === 'Copper' ? '• Audio learning mode<br>• 200 AI Fuel<br>• 28% ISP Commission<br>• 5 Generation TSC' : ''}
                ${requiredTier === 'Silver' ? '• Video learning mode<br>• All 4 AI Apps<br>• 30% ISP Commission<br>• 7 Generation TSC<br>• TLI Access' : ''}
            `;

            if (confirm('You need to upgrade to access this feature. Go to Tiers page?')) {
                window.location.href = 'tiers.html';
            }

            addCoachMessage(message);
        }

        // Initialize
        window.addEventListener('DOMContentLoaded', () => {
            localStorage.setItem('coach_start_date', startDate);
            loadCurriculum();
            loadBTSSScores();
            updateJourneyDay();
            updateCurrentLesson();
            setupSliderListeners();
            loadSettings();
            document.getElementById('welcomeTime').textContent = getCurrentTime();
        });

        // Load curriculum from MANLAW_CURRICULUM
        function loadCurriculum() {
            console.log('🔄 Attempting to load curriculum...');
            console.log('🔍 MANLAW_CURRICULUM exists:', typeof MANLAW_CURRICULUM !== 'undefined');
            if (typeof MANLAW_CURRICULUM !== 'undefined') {
                curriculum = MANLAW_CURRICULUM;
                console.log('✅ Curriculum loaded successfully!');
                console.log('✅ Program name:', curriculum.programName);
                console.log('✅ Phase 1 weeks:', curriculum.phase1_mindset?.weeks?.length);
            } else {
                console.error('❌ MANLAW_CURRICULUM not found in window scope!');
                console.error('❌ Please check if coach-manlaw-curriculum.js loaded correctly');
                alert('⚠️ Curriculum failed to load. Please refresh the page.');
            }
        }

        // Get lesson by day number
        function getLessonByDay(day) {
            if (!curriculum) return null;

            // Search through all phases
            const phases = [
                curriculum.phase1_mindset,
                curriculum.phase2_money,
                curriculum.phase3_legacy,
                curriculum.phase4_momentum,
                curriculum.finalPhase_integration
            ];

            for (const phase of phases) {
                for (const week of phase.weeks) {
                    for (const lesson of week.lessons) {
                        if (lesson.day === day) {
                            return {
                                ...lesson,
                                week: week.week,
                                theme: week.theme,
                                phaseTitle: phase.title
                            };
                        }
                    }
                }
            }

            return null;
        }

        // Update current lesson display
        function updateCurrentLesson() {
            const lesson = getLessonByDay(currentDay);
            if (!lesson) {
                console.error('No lesson found for day:', currentDay);
                return;
            }

            // Update sidebar lesson card
            document.getElementById('lessonWeekPhase').textContent =
                `WEEK ${lesson.week} • DAY ${lesson.day}`;
            document.getElementById('lessonTitle').textContent = lesson.title;

            // Check if lesson is completed
            const isCompleted = completedLessons.includes(currentDay);
            const completeBtn = document.querySelector('#lessonCard button[onclick="completeLesson()"]');
            if (isCompleted) {
                completeBtn.innerHTML = '<i class="fas fa-check-circle"></i> Done';
                completeBtn.style.background = 'linear-gradient(135deg, var(--success), var(--purple))';
            } else {
                completeBtn.innerHTML = '<i class="fas fa-check"></i> Complete';
                completeBtn.style.background = '';
            }
        }

        // View lesson details
        function viewLesson() {
            alert('✅ Button clicked! viewLesson function is running. Current day: ' + currentDay);
            console.log('🔍 viewLesson called - currentDay:', currentDay);
            console.log('🔍 curriculum exists:', !!curriculum);

            // Force load curriculum if not loaded
            if (!curriculum && typeof MANLAW_CURRICULUM !== 'undefined') {
                curriculum = MANLAW_CURRICULUM;
                console.log('✅ Curriculum loaded on-demand');
            }

            const lesson = getLessonByDay(currentDay);
            console.log('🔍 lesson found:', !!lesson, lesson);

            if (!lesson) {
                alert('⚠️ Lesson not found for day ' + currentDay + '. Curriculum may not be loaded properly. Please refresh.');
                console.error('❌ Lesson not found for day:', currentDay);
                console.error('❌ Curriculum status:', curriculum ? 'loaded' : 'not loaded');
                return;
            }

            console.log('✅ Opening modal for lesson:', lesson.title);

            // Check tier access for FAM users
            if (!canAccessLesson(currentDay)) {
                showUpgradeNudge(`Lesson ${currentDay} and beyond`, 'Bronze');
                return;
            }

            // Populate modal
            document.getElementById('modalLessonWeek').textContent =
                `WEEK ${lesson.week} • DAY ${lesson.day}`;
            document.getElementById('modalLessonTitle').textContent = lesson.title;
            document.getElementById('modalLessonContent').textContent = lesson.content;
            document.getElementById('modalLessonActivity').textContent = lesson.activity;
            document.getElementById('modalLessonAssignment').textContent = lesson.assignment;

            // Show/hide app connection
            const appSection = document.getElementById('modalAppConnection');
            if (lesson.appConnection) {
                appSection.style.display = 'block';
                document.getElementById('modalAppName').textContent = lesson.appConnection.app;
                document.getElementById('modalAppHow').textContent = lesson.appConnection.how;
            } else {
                appSection.style.display = 'none';
            }

            // Open modal
            const modal = document.getElementById('lessonModal');
            console.log('🎯 Modal element found:', !!modal);
            if (modal) {
                modal.classList.add('show');
                console.log('✅ Modal classList after adding show:', modal.classList.toString());
                console.log('✅ Modal display style:', window.getComputedStyle(modal).display);
            } else {
                console.error('❌ lessonModal element not found in DOM!');
                alert('⚠️ Modal element not found. Page may be corrupted.');
            }
        }

        // Close lesson modal
        function closeLessonModal() {
            document.getElementById('lessonModal').classList.remove('show');
        }

        // Complete lesson
        function completeLesson() {
            if (!completedLessons.includes(currentDay)) {
                completedLessons.push(currentDay);
                localStorage.setItem('coach_completed_lessons', JSON.stringify(completedLessons));

                // Update UI
                updateCurrentLesson();
                updateProgressDashboard();

                // Close modal if open
                closeLessonModal();

                // Send congratulations message
                addCoachMessage(`
                    <strong>🎉 Lesson Complete!</strong><br><br>
                    You've completed Day ${currentDay}: "${getLessonByDay(currentDay).title}"<br><br>
                    Keep building, Legacy Builder! Ready for the next lesson?
                `);
            }
        }

        // Navigate to previous day
        function previousDay() {
            if (currentDay > 1) {
                currentDay--;
                localStorage.setItem('coach_current_day', currentDay);
                updateCurrentLesson();
                updateJourneyDay();
                closeLessonModal();
            }
        }

        // Navigate to next day
        function nextDay() {
            if (currentDay < 90) {
                // Check if FAM user trying to go beyond lesson 7
                if (!canAccessLesson(currentDay + 1)) {
                    showUpgradeNudge('Lessons 8-90', 'Bronze');
                    return;
                }

                currentDay++;
                localStorage.setItem('coach_current_day', currentDay);
                updateCurrentLesson();
                updateJourneyDay();
                closeLessonModal();
            }
        }

        // Show progress dashboard
        function showProgress() {
            updateProgressDashboard();
            document.getElementById('progressModal').classList.add('show');
        }

        // Close progress modal
        function closeProgress() {
            document.getElementById('progressModal').classList.remove('show');
        }

        // Update progress dashboard
        function updateProgressDashboard() {
            // Overall progress
            document.getElementById('progressDay').textContent = currentDay;
            document.getElementById('progressPercent').textContent = Math.round((currentDay / 90) * 100) + '%';
            document.getElementById('progressCompleted').textContent = completedLessons.length;

            // Phase progress
            const phase1Lessons = completedLessons.filter(d => d >= 1 && d <= 20);
            const phase2Lessons = completedLessons.filter(d => d >= 21 && d <= 35);
            const phase3Lessons = completedLessons.filter(d => d >= 36 && d <= 50);
            const phase4Lessons = completedLessons.filter(d => d >= 51 && d <= 65);

            const phase1Percent = Math.round((phase1Lessons.length / 20) * 100);
            const phase2Percent = Math.round((phase2Lessons.length / 15) * 100);
            const phase3Percent = Math.round((phase3Lessons.length / 15) * 100);
            const phase4Percent = Math.round((phase4Lessons.length / 15) * 100);

            document.getElementById('phase1Progress').textContent = phase1Percent + '%';
            document.getElementById('phase2Progress').textContent = phase2Percent + '%';
            document.getElementById('phase3Progress').textContent = phase3Percent + '%';
            document.getElementById('phase4Progress').textContent = phase4Percent + '%';

            document.getElementById('phase1Bar').style.width = phase1Percent + '%';
            document.getElementById('phase2Bar').style.width = phase2Percent + '%';
            document.getElementById('phase3Bar').style.width = phase3Percent + '%';
            document.getElementById('phase4Bar').style.width = phase4Percent + '%';

            // BTSS history
            const historyDiv = document.getElementById('btssHistory');
            if (btssHistory.length > 0) {
                let historyHTML = '<div style="display: grid; gap: 0.8rem;">';
                btssHistory.forEach((record, index) => {
                    const date = new Date(record.date).toLocaleDateString();
                    historyHTML += `
                        <div style="background: rgba(255,255,255,0.05); padding: 0.8rem; border-radius: 8px;">
                            <div style="font-weight: 600; margin-bottom: 0.5rem;">Assessment ${index + 1} - ${date}</div>
                            <div style="display: grid; grid-template-columns: repeat(2, 1fr); gap: 0.5rem; font-size: 0.85rem;">
                                <div>🧠 Mindset: ${record.mindset}%</div>
                                <div>💸 Money: ${record.money}%</div>
                                <div>⚙️ Legacy: ${record.legacy}%</div>
                                <div>🌍 Movement: ${record.movement}%</div>
                            </div>
                        </div>
                    `;
                });
                historyHTML += '</div>';
                historyDiv.innerHTML = historyHTML;
            }
        }

        // Update journey day
        function updateJourneyDay() {
            document.getElementById('statsDay').textContent = `Day ${currentDay}`;
            const lesson = getLessonByDay(currentDay);
            if (lesson) {
                document.getElementById('headerStatus').textContent =
                    `Day ${currentDay} of 90 • ${lesson.phaseTitle.split(':')[0]}`;
            } else {
                document.getElementById('headerStatus').textContent =
                    `Day ${currentDay} of your 90-day transformation`;
            }
        }

        // Setup slider listeners
        function setupSliderListeners() {
            const sliders = ['mindset', 'money', 'legacy', 'movement'];
            sliders.forEach(name => {
                const slider = document.getElementById(name + 'Slider');
                const value = document.getElementById(name + 'Value');
                slider.oninput = () => {
                    value.textContent = slider.value;
                };
            });
        }

        // Load BTSS scores
        function loadBTSSScores() {
            if (!btssScores) return;

            document.getElementById('mindsetScore').textContent = btssScores.mindset;
            document.getElementById('moneyScore').textContent = btssScores.money;
            document.getElementById('legacyScore').textContent = btssScores.legacy;
            document.getElementById('movementScore').textContent = btssScores.movement;

            document.getElementById('mindsetBar').style.width = btssScores.mindset + '%';
            document.getElementById('moneyBar').style.width = btssScores.money + '%';
            document.getElementById('legacyBar').style.width = btssScores.legacy + '%';
            document.getElementById('movementBar').style.width = btssScores.movement + '%';

            const overall = Math.round((btssScores.mindset + btssScores.money + btssScores.legacy + btssScores.movement) / 4);
            document.getElementById('statsOverall').textContent = overall + '%';
        }

        // Open assessment
        function openAssessment() {
            document.getElementById('assessmentModal').classList.add('show');
        }

        // Close assessment
        function closeAssessment() {
            document.getElementById('assessmentModal').classList.remove('show');
        }

        // Submit assessment
        function submitAssessment() {
            btssScores = {
                mindset: parseInt(document.getElementById('mindsetSlider').value),
                money: parseInt(document.getElementById('moneySlider').value),
                legacy: parseInt(document.getElementById('legacySlider').value),
                movement: parseInt(document.getElementById('movementSlider').value),
                date: new Date().toISOString(),
                day: currentDay
            };

            // Save current scores
            localStorage.setItem('coach_btss_scores', JSON.stringify(btssScores));

            // Add to history
            btssHistory.push(btssScores);
            localStorage.setItem('coach_btss_history', JSON.stringify(btssHistory));

            loadBTSSScores();
            closeAssessment();

            // Send confirmation message
            const overall = Math.round((btssScores.mindset + btssScores.money + btssScores.legacy + btssScores.movement) / 4);
            const weakest = getWeakestLeg();

            // Check for improvement if previous assessment exists
            let improvementMsg = '';
            if (btssHistory.length > 1) {
                const previous = btssHistory[btssHistory.length - 2];
                const prevOverall = Math.round((previous.mindset + previous.money + previous.legacy + previous.movement) / 4);
                const improvement = overall - prevOverall;
                if (improvement > 0) {
                    improvementMsg = `<br><strong>📈 You've improved ${improvement} points since your last assessment!</strong><br>`;
                }
            }

            addCoachMessage(`
                <strong>BTSS Assessment Complete! 🎯</strong><br><br>
                <strong>Your Scores:</strong><br>
                🧠 Mindset Mystery: ${btssScores.mindset}/100<br>
                💸 Money Moves: ${btssScores.money}/100<br>
                ⚙️ Legacy Missions: ${btssScores.legacy}/100<br>
                🌍 Momentum Movement: ${btssScores.movement}/100<br><br>
                <strong>Overall BTSS: ${overall}%</strong>${improvementMsg}<br>
                Your weakest leg is <strong>${weakest.name}</strong>. Remember: a table is only as strong as its weakest leg! Let's focus on strengthening this area to build your billion-dollar empire. 💪
            `);
        }

        // Get weakest leg
        function getWeakestLeg() {
            if (!btssScores) return null;
            const legs = [
                { name: 'Mindset Mystery', score: btssScores.mindset, icon: '🧠' },
                { name: 'Money Moves', score: btssScores.money, icon: '💸' },
                { name: 'Legacy Missions', score: btssScores.legacy, icon: '⚙️' },
                { name: 'Momentum Movement', score: btssScores.movement, icon: '🌍' }
            ];
            return legs.reduce((min, leg) => leg.score < min.score ? leg : min);
        }

        // Show settings
        function showSettings() {
            document.getElementById('settingsModal').classList.add('show');
        }

        // Close settings
        function closeSettings() {
            document.getElementById('settingsModal').classList.remove('show');
        }

        // Save settings
        function saveSettings() {
            const apiKey = document.getElementById('claudeKey').value.trim();
            const model = document.getElementById('aiModel').value;

            if (apiKey) {
                localStorage.setItem('coach_api_key', apiKey);
            }
            localStorage.setItem('coach_ai_model', model);

            alert('✅ Settings saved!');
            closeSettings();
        }

        // Load settings
        function loadSettings() {
            const apiKey = localStorage.getItem('coach_api_key');
            const model = localStorage.getItem('coach_ai_model') || 'claude-sonnet-4-20250514';

            if (apiKey) {
                document.getElementById('claudeKey').value = apiKey;
            }
            document.getElementById('aiModel').value = model;
        }

        // Get current time
        function getCurrentTime() {
            const now = new Date();
            return now.toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' });
        }

        // Add message
        function addMessage(text, isUser = false) {
            const message = document.createElement('div');
            message.className = `message ${isUser ? 'user' : 'coach'}`;

            const avatar = document.createElement('div');
            avatar.className = 'message-avatar';
            avatar.textContent = isUser ? '👤' : '🎯';

            const content = document.createElement('div');
            content.className = 'message-content';
            content.innerHTML = `
                <div class="message-text">${text}</div>
                <div class="message-time">${getCurrentTime()}</div>
            `;

            if (isUser) {
                message.appendChild(content);
                message.appendChild(avatar);
            } else {
                message.appendChild(avatar);
                message.appendChild(content);
            }

            const chatMessages = document.getElementById('chatMessages');
            const typingIndicator = document.getElementById('typingIndicator');
            chatMessages.insertBefore(message, typingIndicator);
            scrollToBottom();

            // Save to history
            chatHistory.push({
                text,
                isUser,
                timestamp: new Date().toISOString()
            });
            localStorage.setItem('coach_chat_history', JSON.stringify(chatHistory));
        }

        // Add coach message (shorthand)
        function addCoachMessage(text) {
            addMessage(text, false);
        }

        // Scroll to bottom
        function scrollToBottom() {
            const chatMessages = document.getElementById('chatMessages');
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }

        // Show typing indicator
        function showTyping() {
            document.getElementById('typingIndicator').classList.add('active');
            scrollToBottom();
        }

        // Hide typing indicator
        function hideTyping() {
            document.getElementById('typingIndicator').classList.remove('active');
        }

        // Send message
        async function sendMessage() {
            const input = document.getElementById('messageInput');
            const text = input.value.trim();
            if (!text) return;

            const apiKey = localStorage.getItem('coach_api_key');
            if (!apiKey) {
                alert('Please add your AI API key in Settings first!');
                showSettings();
                return;
            }

            // Add user message
            addMessage(text, true);
            input.value = '';

            // Show typing
            showTyping();
            document.getElementById('sendBtn').disabled = true;

            try {
                // Build context
                const systemPrompt = buildSystemPrompt();
                const response = await callClaudeAPI(systemPrompt, text, apiKey);

                hideTyping();
                addCoachMessage(response);

            } catch (error) {
                hideTyping();
                addCoachMessage(`Sorry, I encountered an error: ${error.message}. Please check your API key and try again.`);
            }

            document.getElementById('sendBtn').disabled = false;
            input.focus();
        }

        // Build system prompt
        function buildSystemPrompt() {
            const weakest = btssScores ? getWeakestLeg() : null;
            const overall = btssScores ? Math.round((btssScores.mindset + btssScores.money + btssScores.legacy + btssScores.movement) / 4) : null;
            const currentLesson = getLessonByDay(currentDay);
            const lessonsCompleted = completedLessons.length;
            const completionRate = Math.round((lessonsCompleted / 75) * 100);

            // Get app recommendation for current lesson
            let appRecommendation = '';
            if (currentLesson && currentLesson.appConnection) {
                appRecommendation = `\n- Recommended App for Today: ${currentLesson.appConnection.app} - ${currentLesson.appConnection.how}`;
            }

            return `You are Coach Manlaw, a powerhouse AI billionaire coach for the Zero2Billionaires (Z2B) platform.

CURRENT CURRICULUM CONTEXT:
${currentLesson ? `
- Current Day: ${currentDay} of 90
- Current Lesson: "${currentLesson.title}"
- Week ${currentLesson.week}: ${currentLesson.theme}
- Phase: ${currentLesson.phaseTitle}
- Focus Area: ${currentLesson.btssImpact.toUpperCase()}
- Today's Content: ${currentLesson.content.substring(0, 150)}...
- Today's Activity: ${currentLesson.activity}
- Today's Assignment: ${currentLesson.assignment}${appRecommendation}
- Lessons Completed: ${lessonsCompleted}/75 (${completionRate}% of program)
` : '- No curriculum loaded yet'}

IMPORTANT: You are teaching a structured 90-day transformation program. Always be aware of:
1. What day the member is on in their journey
2. What lesson they're currently working on
3. Whether they've completed today's activity and assignment
4. Which phase and leg of the table they're focusing on
5. How their progress aligns with the curriculum

When coaching:
- Reference their current lesson naturally in conversation
- Encourage them to complete today's activity/assignment if they haven't
- Connect their questions to the current curriculum focus
- Remind them of app recommendations when relevant
- Celebrate milestones (Day 20, 35, 50, 65, 75)
- If they seem stuck, suggest reviewing or completing the current day's lesson before moving ahead

YOUR PERSONALITY FRAMEWORK (Coach Manlaw DNA):
- 15% Biblical Principles - Grounded wisdom from Proverbs, Matthew, Philippians. Faith as foundation, not just motivation.
- 10% Humor & Wit - Lighthearted observations that cut through overwhelm. Make success feel attainable and fun.
- 25% Deep Psychology - Understanding human behavior, habits, beliefs, and mental models. Master of mindset transformation.
- 25% Visionary Leadership - Painting billion-dollar futures. Helping Legacy Builders see 10x beyond their current vision.
- 25% Strategic Business Execution - No fluff. Actionable steps, systems, frameworks, and tactical moves that generate results.

YOUR MISSION:
Transform employees into Legacy Builders who build Billionaire Mindsets, Money Systems, Movements, and Legacies using the Four Legs of a Billionaire Table framework.

THE FOUR LEGS:
1. 🧠 Mindset Mystery - Identity transformation, belief systems, vision clarity, spiritual alignment, mental wealth
2. 💸 Money Moves - Financial intelligence, multiple income streams, wealth multiplication, marketing mastery, sales systems
3. ⚙️ Legacy Missions - Scalable systems, automation, purpose-driven business, delegation, time leverage, management excellence
4. 🌍 Momentum Movement - Impact creation, influence amplification, community building, leadership development, movement creation

USER CONTEXT:
${btssScores ? `
- Current BTSS Scores:
  • Mindset Mystery: ${btssScores.mindset}/100
  • Money Moves: ${btssScores.money}/100
  • Legacy Missions: ${btssScores.legacy}/100
  • Momentum Movement: ${btssScores.movement}/100
- Overall BTSS: ${overall}%
- Weakest Leg: ${weakest.name} (${weakest.score}/100) ← PRIORITY FOCUS
` : '- No BTSS assessment yet (encourage them to take it!)'}

COACHING STYLE:
- Speak with warmth, authority, and wit (2-3 concise paragraphs)
- Use emojis strategically for emphasis
- Blend Biblical wisdom seamlessly with business strategy
- Challenge limiting beliefs with compassion + humor
- Provide specific, actionable tactical steps (not just inspiration)
- Celebrate small wins like they're billion-dollar victories
- Focus 60% of coaching on strengthening the weakest leg
- Drop Scripture naturally when it fits (Proverbs for wisdom, Matthew for mission, Philippians for mindset)
- Be conversational, not corporate. Be mentor, not machine.

COMMUNICATION PATTERNS:
- Start responses with affirmation or light humor
- Use analogies and stories to illustrate complex concepts
- Ask provocative questions that trigger breakthrough thinking
- Give 1-3 specific action steps in every response
- End with empowering statement or challenge

CORE PHILOSOPHY:
"I am a Legacy Builder, You are a Legacy Builder, and Together we are Builders of Legacies."

KEY PRINCIPLES:
- You must be rich in thought before you're rich in bank balance
- Don't chase money—build systems that multiply it while you sleep
- Your weakest leg determines your table's stability—fix it first
- Every employee has a billionaire inside—wake them up
- When mission becomes movement, influence becomes infinite
- Legacy isn't what you build—it's what outlives you

TACTICAL FRAMEWORKS TO REFERENCE:
- BTSS Assessment (measure before you manage)
- Four Income Streams Model (earned, profit, passive, portfolio)
- 80/20 Delegation Framework (automate/delegate 80%, focus on 20%)
- Network Effect Multiplication (1 person → 10 → 100 → 1000)
- Faith-Driven Decision Matrix (alignment + strategy = unstoppable)

Respond as Coach Manlaw would - sharp, strategic, faith-filled, funny when appropriate, and always actionable!`;
        }

        // Call AI API
        async function callClaudeAPI(systemPrompt, userMessage, apiKey) {
            try {
                const response = await fetch('https://api.anthropic.com/v1/messages', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'x-api-key': apiKey,
                        'anthropic-version': '2023-06-01'
                    },
                    body: JSON.stringify({
                        model: 'claude-sonnet-4-20250514',
                        max_tokens: 1024,
                        messages: [{
                            role: 'user',
                            content: systemPrompt + '\n\nUser: ' + userMessage
                        }]
                    })
                });

                if (!response.ok) {
                    const error = await response.json();
                    throw new Error(error.error?.message || 'API request failed');
                }

                const data = await response.json();

                if (data.content && data.content[0] && data.content[0].text) {
                    return data.content[0].text.trim();
                } else {
                    throw new Error('Invalid response from AI service');
                }

            } catch (error) {
                console.error('AI service error:', error);
                throw error;
            }
        }

        // Send quick message
        function sendQuickMessage(text) {
            document.getElementById('messageInput').value = text;
            sendMessage();
        }

        // Handle key press
        function handleKeyPress(event) {
            if (event.key === 'Enter' && !event.shiftKey) {
                event.preventDefault();
                sendMessage();
            }
        }

        // ===== AUDIO & VIDEO LEARNING MODES =====

        // Set learning mode
        function setLearningMode(mode) {
            // Check tier access
            if (mode === 'listen' && !canAccessAudio()) {
                showUpgradeNudge('Audio Learning Mode', 'Copper');
                return;
            }

            if (mode === 'watch' && !canAccessVideo()) {
                showUpgradeNudge('Video Learning Mode', 'Silver');
                return;
            }

            learningMode = mode;
            localStorage.setItem('coach_learning_mode', mode);

            // Update button styles
            ['read', 'listen', 'watch'].forEach(m => {
                const btn = document.getElementById('mode' + m.charAt(0).toUpperCase() + m.slice(1));
                if (m === mode) {
                    btn.style.background = 'linear-gradient(135deg, var(--gold), var(--orange))';
                    btn.style.color = 'var(--navy-blue)';
                } else {
                    btn.style.background = '';
                    btn.style.color = '';
                }
            });

            // Show/hide relevant sections
            const contentSections = ['modalLessonContent', 'modalLessonActivity', 'modalLessonAssignment'];
            const audioPlayer = document.getElementById('audioPlayer');
            const videoPlayer = document.getElementById('videoPlayer');

            if (mode === 'read') {
                contentSections.forEach(id => document.getElementById(id).closest('.assessment-item').style.display = 'block');
                audioPlayer.style.display = 'none';
                videoPlayer.style.display = 'none';
                stopAudio();
                stopAnimation();
            } else if (mode === 'listen') {
                contentSections.forEach(id => document.getElementById(id).closest('.assessment-item').style.display = 'none');
                audioPlayer.style.display = 'block';
                videoPlayer.style.display = 'none';
                stopAnimation();
                prepareAudio();
            } else if (mode === 'watch') {
                contentSections.forEach(id => document.getElementById(id).closest('.assessment-item').style.display = 'none');
                audioPlayer.style.display = 'none';
                videoPlayer.style.display = 'block';
                stopAudio();
                startAnimation();
            }
        }

        // Prepare audio for lesson
        function prepareAudio() {
            const lesson = getLessonByDay(currentDay);
            if (!lesson) return;

            // Combine all lesson text
            const fullText = `
                Day ${currentDay}: ${lesson.title}.

                ${lesson.content}

                Today's Activity: ${lesson.activity}

                Your Assignment: ${lesson.assignment}
            `;

            currentUtterance = new SpeechSynthesisUtterance(fullText);
            currentUtterance.rate = 0.9; // Slightly slower for comprehension
            currentUtterance.pitch = 1.0;
            currentUtterance.volume = 1.0;

            // Try to use a quality voice if available
            const voices = speechSynthesis.getVoices();
            const preferredVoice = voices.find(v => v.name.includes('Google') || v.name.includes('Microsoft') || v.name.includes('Natural'));
            if (preferredVoice) {
                currentUtterance.voice = preferredVoice;
            }

            // Update progress during playback
            currentUtterance.onboundary = (event) => {
                const progress = (event.charIndex / fullText.length) * 100;
                document.getElementById('audioProgressBar').style.width = progress + '%';
            };

            currentUtterance.onend = () => {
                isAudioPlaying = false;
                document.getElementById('playPauseBtn').innerHTML = '<i class="fas fa-play"></i>';
                document.getElementById('audioProgressBar').style.width = '100%';
            };
        }

        // Toggle audio play/pause
        function toggleAudio() {
            if (!currentUtterance) {
                prepareAudio();
            }

            if (isAudioPlaying) {
                speechSynthesis.pause();
                isAudioPlaying = false;
                document.getElementById('playPauseBtn').innerHTML = '<i class="fas fa-play"></i>';
            } else {
                if (speechSynthesis.paused) {
                    speechSynthesis.resume();
                } else {
                    speechSynthesis.speak(currentUtterance);
                }
                isAudioPlaying = true;
                document.getElementById('playPauseBtn').innerHTML = '<i class="fas fa-pause"></i>';
            }
        }

        // Stop audio
        function stopAudio() {
            if (speechSynthesis.speaking || speechSynthesis.pending) {
                speechSynthesis.cancel();
            }
            isAudioPlaying = false;
            if (document.getElementById('playPauseBtn')) {
                document.getElementById('playPauseBtn').innerHTML = '<i class="fas fa-play"></i>';
            }
            if (document.getElementById('audioProgressBar')) {
                document.getElementById('audioProgressBar').style.width = '0%';
            }
        }

        // Start animated lesson presentation
        function startAnimation() {
            const lesson = getLessonByDay(currentDay);
            if (!lesson) return;

            animationPaused = false;
            const container = document.getElementById('animatedLesson');

            // Create animated slides
            const slides = [
                { type: 'title', content: `Day ${currentDay}`, subtext: lesson.title, duration: 3000 },
                { type: 'text', content: lesson.content, duration: 8000 },
                { type: 'activity', content: lesson.activity, duration: 6000 },
                { type: 'assignment', content: lesson.assignment, duration: 6000 },
                { type: 'complete', content: 'Lesson Complete!', subtext: 'Mark as complete when ready', duration: 3000 }
            ];

            let currentSlide = 0;

            function showSlide() {
                if (animationPaused) return;

                const slide = slides[currentSlide];
                container.innerHTML = '';

                if (slide.type === 'title') {
                    container.innerHTML = `
                        <div style="animation: fadeInUp 1s ease;">
                            <div style="font-size: 3rem; margin-bottom: 1rem;">${lesson.phaseTitle.includes('🧠') ? '🧠' : lesson.phaseTitle.includes('💸') ? '💸' : lesson.phaseTitle.includes('⚙️') ? '⚙️' : '🌍'}</div>
                            <div style="font-size: 1.2rem; color: var(--orange); font-weight: 600; margin-bottom: 0.5rem;">${slide.content}</div>
                            <div style="font-size: 1.8rem; color: var(--gold); font-weight: 700;">${slide.subtext}</div>
                        </div>
                    `;
                } else if (slide.type === 'text') {
                    container.innerHTML = `
                        <div style="animation: fadeInUp 1s ease;">
                            <div style="font-size: 1.2rem; color: var(--gold); font-weight: 600; margin-bottom: 1.5rem;">📖 Content</div>
                            <div style="font-size: 1rem; line-height: 1.8; text-align: left; max-width: 600px; margin: 0 auto;">${slide.content}</div>
                        </div>
                    `;
                } else if (slide.type === 'activity') {
                    container.innerHTML = `
                        <div style="animation: fadeInUp 1s ease;">
                            <div style="font-size: 1.2rem; color: var(--success); font-weight: 600; margin-bottom: 1.5rem;">🎯 Activity</div>
                            <div style="font-size: 1.1rem; line-height: 1.8; text-align: left; max-width: 600px; margin: 0 auto;">${slide.content}</div>
                        </div>
                    `;
                } else if (slide.type === 'assignment') {
                    container.innerHTML = `
                        <div style="animation: fadeInUp 1s ease;">
                            <div style="font-size: 1.2rem; color: var(--purple); font-weight: 600; margin-bottom: 1.5rem;">📝 Assignment</div>
                            <div style="font-size: 1.1rem; line-height: 1.8; text-align: left; max-width: 600px; margin: 0 auto;">${slide.content}</div>
                        </div>
                    `;
                } else if (slide.type === 'complete') {
                    container.innerHTML = `
                        <div style="animation: zoomIn 0.8s ease;">
                            <div style="font-size: 4rem; margin-bottom: 1rem;">🎉</div>
                            <div style="font-size: 2rem; color: var(--gold); font-weight: 700; margin-bottom: 0.5rem;">${slide.content}</div>
                            <div style="font-size: 1rem; opacity: 0.8;">${slide.subtext}</div>
                        </div>
                    `;
                }

                currentSlide++;
                if (currentSlide < slides.length) {
                    animationInterval = setTimeout(showSlide, slide.duration);
                } else {
                    currentSlide = 0; // Loop back
                }
            }

            showSlide();

            // Add CSS animations
            if (!document.getElementById('animationStyles')) {
                const style = document.createElement('style');
                style.id = 'animationStyles';
                style.textContent = `
                    @keyframes fadeInUp {
                        from {
                            opacity: 0;
                            transform: translateY(30px);
                        }
                        to {
                            opacity: 1;
                            transform: translateY(0);
                        }
                    }
                    @keyframes zoomIn {
                        from {
                            opacity: 0;
                            transform: scale(0.5);
                        }
                        to {
                            opacity: 1;
                            transform: scale(1);
                        }
                    }
                `;
                document.head.appendChild(style);
            }
        }

        // Pause animation
        function pauseAnimation() {
            animationPaused = !animationPaused;
            const btn = document.getElementById('pauseAnimBtn');
            if (animationPaused) {
                clearTimeout(animationInterval);
                btn.innerHTML = '<i class="fas fa-play"></i> Resume';
            } else {
                btn.innerHTML = '<i class="fas fa-pause"></i> Pause';
                startAnimation();
            }
        }

        // Restart animation
        function restartAnimation() {
            stopAnimation();
            startAnimation();
        }

        // Stop animation
        function stopAnimation() {
            if (animationInterval) {
                clearTimeout(animationInterval);
                animationInterval = null;
            }
            animationPaused = false;
        }

        // Update viewLesson to initialize learning mode
        const originalViewLesson = viewLesson;
        viewLesson = function() {
            originalViewLesson();
            // Set initial learning mode
            setLearningMode(learningMode);
        };

        // ===== VIDZIE VIDEO COACHING INTEGRATION =====

        const API_BASE_URL = 'http://localhost:5000/api';
        let currentCoachingVideoId = null;
        let currentCoachingVideoUrl = null;

        // Generate coaching video using VIDZIE
        async function generateCoachingVideo() {
            const lesson = getLessonByDay(currentDay);
            if (!lesson) {
                alert('No lesson found for current day');
                return;
            }

            const authToken = localStorage.getItem('z2b_auth_token');
            if (!authToken) {
                alert('Please login to generate video lessons');
                return;
            }

            try {
                // Disable button and show progress
                const btn = document.getElementById('btnGenerateCoachVideo');
                btn.disabled = true;
                btn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Generating...';
                document.getElementById('videoGenerationProgress').style.display = 'block';

                // Create video script from lesson
                const videoScript = `
Hi! I'm Coach Manlaw, and today is Day ${currentDay} of your 90-day transformation: ${lesson.title}.

${lesson.content}

Here's your activity for today: ${lesson.activity}

And your assignment: ${lesson.assignment}

Remember, Legacy Builder: ${lesson.phaseTitle.split(':')[0]} is about ${lesson.theme}. Stay focused, keep building, and let's make today count!

I am a Legacy Builder, You are a Legacy Builder, and Together we are Builders of Legacies!
                `.trim();

                // Use Coach Manlaw avatar (professional male)
                const coachAvatar = 'https://api.dicebear.com/7.x/avataaars/svg?seed=CoachManlaw&style=circle';

                // Generate video with VIDZIE API

                const response = await fetch(`${API_BASE_URL}/vidzie/generate`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${authToken}`
                    },
                    body: JSON.stringify({
                        videoName: `Coach Manlaw - Day ${currentDay} - ${lesson.title}`,
                        description: `Coaching video for Day ${currentDay}`,
                        videoType: 'coaching',
                        purpose: 'coach-manlaw',
                        sourceImage: coachAvatar,
                        script: videoScript.substring(0, 5000), // Limit to 5000 chars
                        voiceId: 'en-US-GuyNeural', // Professional male voice
                        settings: {
                            resolution: 'HD'
                        }
                    })
                });

                const data = await response.json();

                if (data.success) {
                    currentCoachingVideoId = data.data.videoId;

                    // Poll for video completion
                    pollCoachingVideoStatus(currentCoachingVideoId);
                } else {
                    throw new Error(data.message || 'Failed to generate video');
                }

            } catch (error) {
                console.error('Video generation error:', error);
                alert('Error generating video: ' + error.message);

                // Reset button
                const btn = document.getElementById('btnGenerateCoachVideo');
                btn.disabled = false;
                btn.innerHTML = '<i class="fas fa-magic"></i> Generate Video Lesson';
                document.getElementById('videoGenerationProgress').style.display = 'none';
            }
        }

        // Poll for coaching video completion
        async function pollCoachingVideoStatus(videoId, attempts = 0) {
            const maxAttempts = 60; // 5 minutes
            const authToken = localStorage.getItem('z2b_auth_token');

            try {
                const response = await fetch(`${API_BASE_URL}/vidzie/video/${videoId}/status`, {
                    headers: {
                        'Authorization': `Bearer ${authToken}`
                    }
                });

                const data = await response.json();

                if (data.success) {
                    const { status, progress, videoUrl } = data.data;

                    // Update progress bar
                    document.getElementById('videoGenProgressBar').style.width = progress + '%';

                    if (status === 'completed' && videoUrl) {
                        // Video is ready!
                        currentCoachingVideoUrl = videoUrl;
                        displayCoachingVideo(videoUrl);

                        // Reset button
                        const btn = document.getElementById('btnGenerateCoachVideo');
                        btn.disabled = false;
                        btn.innerHTML = '<i class="fas fa-check"></i> Video Generated!';
                        document.getElementById('videoGenerationProgress').style.display = 'none';

                        // Send success message to chat
                        addCoachMessage(`
                            <strong>🎥 Your Video Lesson is Ready!</strong><br><br>
                            I've created a personalized video lesson for Day ${currentDay}. Watch it anytime you need a refresher!<br><br>
                            <em>Pro tip: Download it to your device so you can watch offline!</em>
                        `);

                        return;
                    }

                    if (status === 'failed') {
                        throw new Error('Video generation failed');
                    }

                    // Continue polling
                    if (attempts < maxAttempts) {
                        setTimeout(() => pollCoachingVideoStatus(videoId, attempts + 1), 5000);
                    } else {
                        throw new Error('Video generation timeout');
                    }
                }

            } catch (error) {
                console.error('Poll video error:', error);
                alert('Video generation failed: ' + error.message);

                // Reset button
                const btn = document.getElementById('btnGenerateCoachVideo');
                btn.disabled = false;
                btn.innerHTML = '<i class="fas fa-magic"></i> Generate Video Lesson';
                document.getElementById('videoGenerationProgress').style.display = 'none';
            }
        }

        // Display coaching video
        function displayCoachingVideo(videoUrl) {
            const videoSection = document.getElementById('generatedVideoSection');
            const videoSource = document.getElementById('videoSource');
            const videoPlayer = document.getElementById('coachingVideoPlayer');
            const generateSection = document.getElementById('videoGenerateSection');
            const animatedSection = document.getElementById('animatedLesson');

            // Hide generate section and animation
            generateSection.style.display = 'none';
            animatedSection.style.display = 'none';
            stopAnimation();

            // Show video
            videoSource.src = videoUrl;
            videoPlayer.load();
            videoSection.style.display = 'block';
        }

        // Download coaching video
        async function downloadCoachingVideo() {
            if (!currentCoachingVideoUrl) {
                alert('No video available to download');
                return;
            }

            try {
                // Track download
                const authToken = localStorage.getItem('z2b_auth_token');
                if (currentCoachingVideoId && authToken) {
                    await fetch(`${API_BASE_URL}/vidzie/video/${currentCoachingVideoId}/download`, {
                        method: 'POST',
                        headers: {
                            'Authorization': `Bearer ${authToken}`
                        }
                    });
                }

                // Download video
                const lesson = getLessonByDay(currentDay);
                const link = document.createElement('a');
                link.href = currentCoachingVideoUrl;
                link.download = `Coach-Manlaw-Day-${currentDay}-${lesson.title.replace(/[^a-z0-9]/gi, '-')}.mp4`;
                link.click();

                addCoachMessage('✅ Video downloaded! Keep building, Legacy Builder!');

            } catch (error) {
                console.error('Download error:', error);
                alert('Error downloading video: ' + error.message);
            }
        }

        // Share coaching video
        async function shareCoachingVideo() {
            if (!currentCoachingVideoId) {
                alert('No video available to share');
                return;
            }

            try {
                const authToken = localStorage.getItem('z2b_auth_token');

                const response = await fetch(`${API_BASE_URL}/vidzie/video/${currentCoachingVideoId}/share`, {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bearer ${authToken}`
                    }
                });

                const data = await response.json();

                if (data.success) {
                    const shareUrl = data.data.shareUrl;

                    // Copy to clipboard
                    navigator.clipboard.writeText(shareUrl);

                    addCoachMessage(`
                        <strong>🔗 Share Link Created!</strong><br><br>
                        Link copied to clipboard: <a href="${shareUrl}" target="_blank" style="color: var(--gold);">${shareUrl}</a><br><br>
                        Share this lesson with your team, accountability partner, or anyone building their legacy!
                    `);
                } else {
                    throw new Error(data.message || 'Failed to create share link');
                }

            } catch (error) {
                console.error('Share error:', error);
                alert('Error sharing video: ' + error.message);
            }
        }

        // ===== INITIALIZATION =====

        // Initialize page on load
        function initializePage() {
            console.log('🎯 Coach ManLaw: Initializing...');

            // Load curriculum
            if (typeof COACH_CURRICULUM !== 'undefined') {
                curriculum = COACH_CURRICULUM;
                console.log('✅ Curriculum loaded:', curriculum.length, 'lessons');
            } else {
                console.warn('⚠️ Curriculum not loaded yet');
            }

            // Update displays
            updateCurrentLesson();
            updateJourneyDay();
            if (btssScores) {
                updateBTSSDisplay();
            }

            // Set welcome time
            const now = new Date();
            document.getElementById('welcomeTime').textContent =
                now.toLocaleTimeString('en-US', { hour: 'numeric', minute: '2-digit' });

            console.log('✅ Coach ManLaw: Ready!');
            console.log('Current Day:', currentDay);
            console.log('Functions available:', {
                viewLesson: typeof viewLesson,
                openAssessment: typeof openAssessment,
                showProgress: typeof showProgress
            });
        }

        // Run on DOM ready
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', initializePage);
        } else {
            initializePage();
        }

        // ====================================================================
        // CRITICAL FIX: Expose functions to global scope for onclick handlers
        // ====================================================================
        // All buttons use inline onclick attributes which execute in global scope.
        // These assignments make the functions accessible from window object.
        window.viewLesson = viewLesson;
        window.openAssessment = openAssessment;
        window.showProgress = showProgress;
        window.closeProgress = closeProgress;
        window.completeLesson = completeLesson;
        window.previousDay = previousDay;
        window.nextDay = nextDay;
        window.closeLessonModal = closeLessonModal;
        window.closeAssessment = closeAssessment;
        window.submitAssessment = submitAssessment;
        window.showSettings = showSettings;
        window.closeSettings = closeSettings;
        window.saveSettings = saveSettings;
        window.sendMessage = sendMessage;
        window.setLearningMode = setLearningMode;
        window.toggleAudio = toggleAudio;
        window.stopAudio = stopAudio;
        window.playAnimatedLesson = playAnimatedLesson;
        window.restartAnimation = restartAnimation;
        window.pauseAnimation = pauseAnimation;
        window.generateCoachingVideo = generateCoachingVideo;
        window.downloadCoachingVideo = downloadCoachingVideo;
        window.shareCoachingVideo = shareCoachingVideo;

        console.log('✅ All functions exposed to global scope - buttons ready!');
    </script>

    <!-- Load Curriculum -->
    <script src="coach-manlaw-curriculum.js" onerror="console.warn('⚠️ Failed to load curriculum file')"></script>
    <script>
        // Reload curriculum after external script loads
        if (typeof MANLAW_CURRICULUM !== 'undefined' && typeof curriculum !== 'undefined') {
            curriculum = MANLAW_CURRICULUM;
            if (typeof updateCurrentLesson === 'function') {
                updateCurrentLesson();
            }
            console.log('✅ Curriculum loaded from external file');
        } else {
            console.warn('⚠️ Curriculum not available - buttons will still work with modals');
        }
    </script>

    <!-- Z2B Ecosystem Integration (optional) -->
    <script src="../js/app-config.js" onerror="console.warn('⚠️ app-config.js not found (optional)')"></script>
    <script src="../js/ecosystem-footer.js" onerror="console.warn('⚠️ ecosystem-footer.js not found (optional)')"></script>
</body>

</html>